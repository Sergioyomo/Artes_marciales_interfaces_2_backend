// Import the service layer for handling type-related operations
const aprendizService = require("../services/aprendizService");
const Respuesta = require("../utils/respuesta");

class AprendizController {
  // Handles retrieval of all types
  async getAllAprendiz(req, res) {
      try {
        const { listado } = req.query; // Extract query parameters to determine the type of response
        if (listado) {
          // Fetch a list of components if 'listado' is true
          const filtros = req.query;
          const data = await aprendizService.getAprendicesFiltrados(filtros);
          res.json(Respuesta.exito(data, "Listado de Aprendices filtrado"));
        }  else {
          // Fetch all components if no specific parameter is provided
          const data = await aprendizService.getAllAprendiz();
          res.json(Respuesta.exito(data, "Datos de Aprendiz recuperados"));
        }
      } catch (err) {
        // Handle errors during the service call
        res
          .status(500)
          .json(
            Respuesta.error(
              null,
              `Error al recuperar los datos: ${req.originalUrl}`
            )
          );
      }
    }
  
  async updateAprendiz(req, res) {
      try {
          const { id } = req.params;
          const { nombre, fecha_nacimiento, idSensei, cuota, pagado } = req.body;
          const data = await aprendizService.updateAprendiz(id, { nombre, fecha_nacimiento, idSensei, cuota, pagado });
          res.json(Respuesta.exito(data, "Aprendiz actualizado correctamente"));
      } catch (err) {
          res.status(500).json(Respuesta.error(null, `Error al actualizar el Aprendiz: ${req.originalUrl}`));
      }
    }

  // Handles retrieval of a single type by its ID (implementation pending)
    async getAprendizById(req, res) {
      try {
        const idAprendiz = req.params.id; // Extract component ID from the request URL
  
        // Fetch only the sensei without related data
        const aprendiz = await aprendizService.getAprendizById(
          idAprendiz
        );
        if (!aprendiz) {
          // Handle case where the component is not found
          res
            .status(404)
            .json(
              Respuesta.error(null, `Aprendiz no encontrado: ${idAprendiz}`)
            );
        } else {
          res.json(Respuesta.exito(aprendiz, "Aprendiz recuperado"));
        }
        
      } catch (err) {
        // Handle errors during the service call
        res
          .status(500)
          .json(
            Respuesta.error(
              null,
              `Error al recuperar los datos: ${req.originalUrl}`
            )
          );
      }
    }
    // Implementa la lógica para obtener un dato por ID (pendiente de implementar)
  

  // Handles creation of a new type (implementation pending)
  async createAprendiz(req, res) {
      try {
        const aprendizData = req.body; // Extract the component data from the request body
        const result = await aprendizService.createAprendiz(aprendizData); // Call service to create the sensei
        res
          .status(201)
          .json(
            Respuesta.exito(
              { insertId: result.insertId },
              "Aprendiz dado de alta"
            )
          );
      } catch (err) {
        // Handle errors during the creation process
        res
          .status(500)
          .json(
            Respuesta.error(
              null,
              `Error al insertar el aprendiz: ${req.originalUrl}`
            )
          );
      }
    }

  // Handles updating of a type by its ID (implementation pending)
  async updateTipo(req, res) {
    // Implementa la lógica para actualizar un dato por ID (pendiente de implementar)
  }

  // Handles deletion of a type by its ID (implementation pending)
  async deleteAprendiz(req, res) {
      try {
        const idAprendiz = req.params.id; // Extract component ID from the request URL
        await aprendizService.deleteAprendiz(idAprendiz); // Call service to delete the component
        res.status(204).end(); // 204: No Content indicates successful deletion with no response body
      } catch (err) {
        // Handle errors during the deletion process
        res.status(500).json({ error: "Error interno del servidor" });
      }
    }
}

module.exports = new AprendizController();

// Structure of result (MySQL)
// {
//   fieldCount: 0,
//   affectedRows: 1, // Number of rows affected by the query
//   insertId: 1,     // ID generated by the insertion operation
//   serverStatus: 2,
//   warningCount: 0,
//   message: '',
//   protocol41: true,
//   changedRows: 0   // Number of rows changed by the query
// }
